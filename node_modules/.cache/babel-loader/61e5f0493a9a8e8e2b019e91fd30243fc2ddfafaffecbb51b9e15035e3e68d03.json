{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getDatabase, ref, set, remove, onValue } from \"firebase/database\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nexport default {\n  data() {\n    return {\n      username: '',\n      items: []\n    };\n  },\n  methods: {\n    editItem(item) {\n      // 編集後のテキストが1000文字を超えていたら、それを切り詰めます\n      if (item.text.length > 1000) {\n        item.text = item.text.slice(0, 1000);\n      }\n      const auth = getAuth();\n      const db = getDatabase();\n      if (auth.currentUser) {\n        set(ref(db, 'usernames/' + auth.currentUser.displayName + '/odai/' + item.id), {\n          id: item.id,\n          text: item.text\n        }).then(() => {\n          alert('保存完了'); // 保存が完了したことを通知\n        });\n      }\n    },\n    deleteItem(item) {\n      this.items = this.items.filter(i => i.id !== item.id);\n      const auth = getAuth();\n      const db = getDatabase();\n      if (auth.currentUser) {\n        remove(ref(db, 'usernames/' + auth.currentUser.displayName + '/odai/' + item.id));\n      }\n    },\n    checkLength(item) {\n      if (item.text.length > 1000) {\n        item.text = item.text.slice(0, 1000);\n      }\n    }\n  },\n  created() {\n    const auth = getAuth();\n    const db = getDatabase();\n    onAuthStateChanged(auth, user => {\n      if (!user) {\n        this.$router.push('/login-page');\n      }\n    });\n    if (auth.currentUser) {\n      this.username = auth.currentUser.displayName;\n      const odaiRef = ref(db, 'usernames/' + this.username + '/odai');\n      onValue(odaiRef, snapshot => {\n        if (snapshot.exists()) {\n          this.items = Object.values(snapshot.val());\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["getDatabase","ref","set","remove","onValue","getAuth","onAuthStateChanged","data","username","items","methods","editItem","item","text","length","slice","auth","db","currentUser","displayName","id","then","alert","deleteItem","filter","i","checkLength","created","user","$router","push","odaiRef","snapshot","exists","Object","values","val"],"sources":["C:\\Users\\ST\\Desktop\\vue3\\ODAI\\src\\components\\MyPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h3 class=\"username\">ユーザーネーム: {{ username }}</h3>\r\n    <div v-for=\"item in items\" :key=\"item.id\" class=\"item-box\">\r\n      <textarea v-model=\"item.text\" @input=\"checkLength(item)\" maxlength=\"1000\"></textarea>\r\n    <div class=\"button-container\">\r\n      <button @click=\"editItem(item)\">保存</button>\r\n      <button @click=\"deleteItem(item)\">削除</button>\r\n    </div>\r\n</div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport { getDatabase, ref, set, remove, onValue } from \"firebase/database\";\r\nimport { getAuth,onAuthStateChanged } from \"firebase/auth\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '',\r\n      items: [],\r\n    };\r\n  },\r\n  methods: {\r\n    editItem(item) {\r\n  // 編集後のテキストが1000文字を超えていたら、それを切り詰めます\r\n  if (item.text.length > 1000) {\r\n    item.text = item.text.slice(0, 1000);\r\n  }\r\n  const auth = getAuth();\r\n  const db = getDatabase();\r\n  if (auth.currentUser) {\r\n    set(ref(db, 'usernames/' + auth.currentUser.displayName + '/odai/' + item.id), { id: item.id, text: item.text })\r\n      .then(() => {\r\n        alert('保存完了'); // 保存が完了したことを通知\r\n      });\r\n  }\r\n},\r\n\r\n    deleteItem(item) {\r\n      this.items = this.items.filter(i => i.id !== item.id);\r\n      const auth = getAuth();\r\n      const db = getDatabase();\r\n      if (auth.currentUser) {\r\n        remove(ref(db, 'usernames/' + auth.currentUser.displayName + '/odai/' + item.id));\r\n      }\r\n    },\r\n    checkLength(item) {\r\n      if (item.text.length > 1000) {\r\n        item.text = item.text.slice(0, 1000);\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    const auth = getAuth();\r\n    const db = getDatabase();\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (!user) {\r\n        this.$router.push('/login-page');\r\n      }\r\n    });\r\n    if (auth.currentUser) {\r\n      this.username = auth.currentUser.displayName;\r\n      const odaiRef = ref(db, 'usernames/' + this.username + '/odai');\r\n      onValue(odaiRef, (snapshot) => {\r\n        if (snapshot.exists()) {\r\n          this.items = Object.values(snapshot.val());\r\n        }\r\n      });\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ndiv {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\nh2 {\r\n  margin-bottom: 20px;\r\n}\r\n\r\np {\r\n  margin-bottom: 10px;\r\n}\r\n\r\ndiv[v-for] {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\r\n  margin-bottom: 20px;\r\n  width: 80%;\r\n}\r\n\r\nbutton {\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  border: none;\r\n  color: #fff;\r\n  background-color: #333;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #555;\r\n}\r\n\r\n.username {\r\n  font-size: 2em;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.item-box {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\r\n  margin-bottom: 20px;\r\n  width: 80%;\r\n}\r\n\r\n.button-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n\r\nbutton {\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  border: none;\r\n  color: #fff;\r\n  background-color: #333;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n  width: 45%; /* adjust as needed */\r\n}\r\n\r\ntextarea {\r\n  width: 90%; \r\n  height: 10vw;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  margin-bottom: 10px;\r\n  font-size:20px\r\n}\r\n\r\n@media (max-width: 640px) {\r\n  textarea{\r\n    height: 35vw;\r\n  }\r\n}\r\n\r\n</style>\r\n"],"mappings":";AAeA,SAASA,WAAW,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,EAAEC,OAAM,QAAS,mBAAmB;AAC1E,SAASC,OAAO,EAACC,kBAAiB,QAAS,eAAe;AAE1D,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQA,CAACC,IAAI,EAAE;MACjB;MACA,IAAIA,IAAI,CAACC,IAAI,CAACC,MAAK,GAAI,IAAI,EAAE;QAC3BF,IAAI,CAACC,IAAG,GAAID,IAAI,CAACC,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;MACtC;MACA,MAAMC,IAAG,GAAIX,OAAO,CAAC,CAAC;MACtB,MAAMY,EAAC,GAAIjB,WAAW,CAAC,CAAC;MACxB,IAAIgB,IAAI,CAACE,WAAW,EAAE;QACpBhB,GAAG,CAACD,GAAG,CAACgB,EAAE,EAAE,YAAW,GAAID,IAAI,CAACE,WAAW,CAACC,WAAU,GAAI,QAAO,GAAIP,IAAI,CAACQ,EAAE,CAAC,EAAE;UAAEA,EAAE,EAAER,IAAI,CAACQ,EAAE;UAAEP,IAAI,EAAED,IAAI,CAACC;QAAK,CAAC,EAC5GQ,IAAI,CAAC,MAAM;UACVC,KAAK,CAAC,MAAM,CAAC,EAAE;QACjB,CAAC,CAAC;MACN;IACF,CAAC;IAEGC,UAAUA,CAACX,IAAI,EAAE;MACf,IAAI,CAACH,KAAI,GAAI,IAAI,CAACA,KAAK,CAACe,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACL,EAAC,KAAMR,IAAI,CAACQ,EAAE,CAAC;MACrD,MAAMJ,IAAG,GAAIX,OAAO,CAAC,CAAC;MACtB,MAAMY,EAAC,GAAIjB,WAAW,CAAC,CAAC;MACxB,IAAIgB,IAAI,CAACE,WAAW,EAAE;QACpBf,MAAM,CAACF,GAAG,CAACgB,EAAE,EAAE,YAAW,GAAID,IAAI,CAACE,WAAW,CAACC,WAAU,GAAI,QAAO,GAAIP,IAAI,CAACQ,EAAE,CAAC,CAAC;MACnF;IACF,CAAC;IACDM,WAAWA,CAACd,IAAI,EAAE;MAChB,IAAIA,IAAI,CAACC,IAAI,CAACC,MAAK,GAAI,IAAI,EAAE;QAC3BF,IAAI,CAACC,IAAG,GAAID,IAAI,CAACC,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;MACtC;IACF;EACF,CAAC;EACDY,OAAOA,CAAA,EAAG;IACR,MAAMX,IAAG,GAAIX,OAAO,CAAC,CAAC;IACtB,MAAMY,EAAC,GAAIjB,WAAW,CAAC,CAAC;IACxBM,kBAAkB,CAACU,IAAI,EAAGY,IAAI,IAAK;MACjC,IAAI,CAACA,IAAI,EAAE;QACT,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC;MAClC;IACF,CAAC,CAAC;IACF,IAAId,IAAI,CAACE,WAAW,EAAE;MACpB,IAAI,CAACV,QAAO,GAAIQ,IAAI,CAACE,WAAW,CAACC,WAAW;MAC5C,MAAMY,OAAM,GAAI9B,GAAG,CAACgB,EAAE,EAAE,YAAW,GAAI,IAAI,CAACT,QAAO,GAAI,OAAO,CAAC;MAC/DJ,OAAO,CAAC2B,OAAO,EAAGC,QAAQ,IAAK;QAC7B,IAAIA,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;UACrB,IAAI,CAACxB,KAAI,GAAIyB,MAAM,CAACC,MAAM,CAACH,QAAQ,CAACI,GAAG,CAAC,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}