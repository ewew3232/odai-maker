{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"マイページ\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"p\", null, \"ユーザーネーム: \" + _toDisplayString($data.username), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.items, item => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: item.id\n    }, [_createElementVNode(\"p\", null, _toDisplayString(item.text), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.editItem(item)\n    }, \"編集\", 8 /* PROPS */, _hoisted_2), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteItem(item)\n    }, \"削除\", 8 /* PROPS */, _hoisted_3)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_toDisplayString","$data","username","_Fragment","_renderList","items","item","key","id","text","onClick","$event","$options","editItem","_hoisted_2","deleteItem","_hoisted_3"],"sources":["C:\\Users\\ST\\Desktop\\vue3\\ODAI\\src\\components\\MyPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>マイページ</h2>\r\n    <p>ユーザーネーム: {{ username }}</p>\r\n    <div v-for=\"item in items\" :key=\"item.id\">\r\n      <p>{{ item.text }}</p>\r\n      <button @click=\"editItem(item)\">編集</button>\r\n      <button @click=\"deleteItem(item)\">削除</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getDatabase, ref, set, remove, onValue } from \"firebase/database\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '',\r\n      items: [],\r\n    };\r\n  },\r\n  methods: {\r\n    editItem(item) {\r\n      let itemToEdit = item.text;\r\n      let editedItem = window.prompt('お題を編集してください', itemToEdit);\r\n      if (editedItem) {\r\n        // 編集後のテキストが1000文字を超えていたら、それを切り詰めます\r\n        if (editedItem.length > 1000) {\r\n          editedItem = editedItem.slice(0, 1000);\r\n        }\r\n        const auth = getAuth();\r\n        const db = getDatabase();\r\n        if (auth.currentUser) {\r\n          set(ref(db, 'usernames/' + auth.currentUser.displayName + '/odai/' + item.id), { id: item.id, text: editedItem });\r\n        }\r\n      }\r\n    },\r\n    deleteItem(item) {\r\n      this.items = this.items.filter(i => i.id !== item.id);\r\n      const auth = getAuth();\r\n      const db = getDatabase();\r\n      if (auth.currentUser) {\r\n        remove(ref(db, 'usernames/' + auth.currentUser.displayName + '/odai/' + item.id));\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    const auth = getAuth();\r\n    const db = getDatabase();\r\n    if (auth.currentUser) {\r\n      this.username = auth.currentUser.displayName;\r\n      const odaiRef = ref(db, 'usernames/' + this.username + '/odai');\r\n      onValue(odaiRef, (snapshot) => {\r\n        if (snapshot.exists()) {\r\n          this.items = Object.values(snapshot.val());\r\n        }\r\n      });\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n"],"mappings":";gCAEIA,mBAAA,CAAc,YAAV,OAAK;mBAFb;mBAAA;;uBACEC,mBAAA,CAQM,cAPJC,UAAc,EACdF,mBAAA,CAA8B,WAA3B,WAAS,GAAAG,gBAAA,CAAGC,KAAA,CAAAC,QAAQ,mB,kBACvBJ,mBAAA,CAIMK,SAAA,QARVC,WAAA,CAIwBH,KAAA,CAAAI,KAAK,EAAbC,IAAI;yBAAhBR,mBAAA,CAIM;MAJsBS,GAAG,EAAED,IAAI,CAACE;QACpCX,mBAAA,CAAsB,WAAAG,gBAAA,CAAhBM,IAAI,CAACG,IAAI,kBACfZ,mBAAA,CAA2C;MAAlCa,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,QAAQ,CAACP,IAAI;OAAG,IAAE,iBANxCQ,UAAA,GAOMjB,mBAAA,CAA6C;MAApCa,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAG,UAAU,CAACT,IAAI;OAAG,IAAE,iBAP1CU,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}