{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"マイページ\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.items, (item, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"p\", null, _toDisplayString(item), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $setup.editItem(index)\n    }, \"編集\", 8 /* PROPS */, _hoisted_2), _createElementVNode(\"button\", {\n      onClick: $event => $setup.deleteItem(index)\n    }, \"削除\", 8 /* PROPS */, _hoisted_3)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$setup","items","item","index","key","_toDisplayString","onClick","$event","editItem","_hoisted_2","deleteItem","_hoisted_3"],"sources":["C:\\Users\\ST\\Desktop\\vue3\\my-project - コピー\\src\\components\\MyPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>マイページ</h2>\r\n      <div v-for=\"(item, index) in items\" :key=\"index\">\r\n        <p>{{ item }}</p>\r\n        <button @click=\"editItem(index)\">編集</button>\r\n        <button @click=\"deleteItem(index)\">削除</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref } from 'vue';\r\n  import { getDatabase, ref as dbRef, onValue, remove } from \"firebase/database\";\r\n  \r\n  export default {\r\n    setup() {\r\n      const db = getDatabase();\r\n      const items = ref([]);\r\n  \r\n      // Firebase Realtime Databaseからデータを取得します\r\n      const itemsRef = dbRef(db, 'username/odai');\r\n      onValue(itemsRef, (snapshot) => {\r\n        items.value = snapshot.val();\r\n      });\r\n  \r\n      const editItem = (index) => {\r\n        console.log(`Editing item at index: ${index}`);\r\n        // ここでアイテムの編集を行います\r\n      };\r\n\r\n  \r\n      const deleteItem = (index) => {\r\n        // Firebase Realtime Databaseからアイテムを削除します\r\n        const itemRef = dbRef(db, `username/odai/${index}`);\r\n        remove(itemRef);\r\n      };\r\n  \r\n      return { items, editItem, deleteItem };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n</style>"],"mappings":";gCAEMA,mBAAA,CAAc,YAAV,OAAK;mBAFf;mBAAA;;uBACIC,mBAAA,CAOM,cANJC,UAAc,G,kBACdD,mBAAA,CAIME,SAAA,QAPZC,WAAA,CAGmCC,MAAA,CAAAC,KAAK,EAHxC,CAGmBC,IAAI,EAAEC,KAAK;yBAAxBP,mBAAA,CAIM;MAJ+BQ,GAAG,EAAED;IAAK,IAC7CR,mBAAA,CAAiB,WAAAU,gBAAA,CAAXH,IAAI,kBACVP,mBAAA,CAA4C;MAAnCW,OAAK,EAAAC,MAAA,IAAEP,MAAA,CAAAQ,QAAQ,CAACL,KAAK;OAAG,IAAE,iBAL3CM,UAAA,GAMQd,mBAAA,CAA8C;MAArCW,OAAK,EAAAC,MAAA,IAAEP,MAAA,CAAAU,UAAU,CAACP,KAAK;OAAG,IAAE,iBAN7CQ,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}